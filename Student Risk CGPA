#!/usr/bin/env python
# coding: utf-8

# # Importing the libraries

# In[1]:


#importing the libraries

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn import metrics
import statsmodels.api as sm 
from statsmodels.stats.outliers_influence import variance_inflation_factor 

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor


# # Analysis on clean dataset

# In[2]:


#loading the clean dataset

student_clean_data = pd.read_csv('D:/MPS - Analytics/ALY 6080 - Integrated Exp Learning/STUDENT RISK ANALYSIS - CGPA PREDICTION/Student Risk Analysis_CleanedData.csv')


# In[4]:


student_clean_data


# In[5]:


#data types

student_clean_data.dtypes


# In[6]:


#data columns

student_clean_data.columns


# # Data Cleaning 

# In[3]:


#data cleaning for column 'Entrance Taken'

student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].replace(['.', '-', '___', "  ", "Nil", "No", "Nothing", "No entrance exam", "No exam has been written", "No rank"], 'No Exam/No Rank')
student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].replace(["Amritha vishwa vidyaPeetham University"], 'University Exam')
student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].fillna("No Exam/No Rank")
student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].replace(['NRI', 'nri', 'Nri'], 'NRI')
student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].replace(['Spot admissions'], 'Spot admission')
student_clean_data['ENTRANCE TAKEN '] = student_clean_data['ENTRANCE TAKEN '].replace(['In ipe','Ip', 'Ip marks- based on 12th marks'], 'IP')

print("Replace Successful!")


# In[4]:


#data cleaning for column 'Seat Type'

student_clean_data['SEAT TYPE '] = student_clean_data['SEAT TYPE '].replace(["CONVENER (EAMCET)"], 'EAMCET')
student_clean_data['SEAT TYPE '] = student_clean_data['SEAT TYPE '].replace(["CONVENER (E-CET)"], 'E-CET')

print("Replace Successful!")


# In[5]:


#data cleaning for column 'Rank of Entrance Exam'

student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].replace([" ", "No", "Na", "NalA", "Exam has no been written", "na", "No Rank"], '0')
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].fillna(0)
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].astype(str).str.replace(",", "").str.replace(".", "").str.replace("k", "000").str.replace("(", "").str.replace(")","").str.replace(" ", "").str.replace("16000-","")
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].str.replace("186/ran000-", "").str.replace("AIR", "").str.replace("8605-OBCNCL", "").str.replace("BRANCHRANK410INTEGRATEDRANK", "").str.replace("-CRL","").str.replace("BRANCHRANK2300INTEGRATEDRANK","").str.replace("Examhasnobeenwritten","0")
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].str.replace("36thbranchran000", "0").str.replace("666branchran000", "0").str.replace("BRANCH74","0").str.replace("28branchran000","0").str.replace("JEEMAINSRANK-","").str.replace("ALLINDIA","").str.replace("allindia","")
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].str.replace("197branch", "").str.replace("Integrated", "").str.replace("23branchran000and208ran000","0").str.replace("NalA","0").str.replace("Jeemains","0").str.replace("nan","0").str.replace("Branchran000-32integratedran000-","0")
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].fillna(0)
student_clean_data['RANK OF ENTRANCE TEST '].astype("int")


average = student_clean_data['RANK OF ENTRANCE TEST '][student_clean_data['RANK OF ENTRANCE TEST ']!=0].median()
student_clean_data['RANK OF ENTRANCE TEST '] = student_clean_data['RANK OF ENTRANCE TEST '].replace(0, average)


print("Replace Successful!")


# In[6]:


#converting the datatypes

student_clean_data['RANK OF ENTRANCE TEST '] = pd.to_numeric(student_clean_data['RANK OF ENTRANCE TEST '])


# In[12]:


student_clean_data.dtypes


# # Label Encoding for categorical parameters

# In[7]:


#labeling the columns using Label Encoder

labelencoder = LabelEncoder()
student_clean_data['Entrance Taken Labels']  = labelencoder.fit_transform(student_clean_data["ENTRANCE TAKEN "])
student_clean_data['Seat Type Labels']  = labelencoder.fit_transform(student_clean_data["SEAT TYPE "])
student_clean_data['Gender Labels']  = labelencoder.fit_transform(student_clean_data["GENDER "])
student_clean_data['Branch Labels']  = labelencoder.fit_transform(student_clean_data["BRANCH "])
student_clean_data['Category Labels']  = labelencoder.fit_transform(student_clean_data["CATEGORY "])


# In[8]:


student_clean_data


# # Correlation Plot 

# In[14]:


#plotting correlation matrix for checking correlation between variables and the eligibility labels

plt.figure(figsize = (16,9))
ax = plt.subplot()
sns.heatmap(student_clean_data.corr(),annot=True, fmt='.1f', ax=ax, cmap="YlGnBu")
ax.set_title('Correlation Plot')


# In[15]:


#new dataframe for training model

new_student_clean_data = pd.DataFrame()

new_student_clean_data['10TH CGPA'] = student_clean_data['10TH CGPA ']
new_student_clean_data['12TH  / DIP %'] = student_clean_data['12TH  / DIP % ']
new_student_clean_data['Branch Labels'] = student_clean_data['Branch Labels']
new_student_clean_data['Gender Labels'] = student_clean_data['Gender Labels']
new_student_clean_data['Category Labels'] = student_clean_data['Category Labels']
new_student_clean_data['Entrance Taken Labels '] = student_clean_data['Entrance Taken Labels']
new_student_clean_data['Seat Type Labels '] = student_clean_data['Seat Type Labels']
new_student_clean_data['Rank of Entrance Test'] = student_clean_data['RANK OF ENTRANCE TEST ']


# # Model Building

# In[16]:


#extracting features and labels from the dataset

X = new_student_clean_data
Y = student_clean_data['B.TECH  CGPA ']


# In[34]:


#splitting data into training and testing set

X_train,X_test,y_train,y_test = train_test_split(X,Y,random_state=42, test_size=0.2)
print(X_train.shape)
print(X_test.shape)


# # Linear Regression Model

# In[35]:


#linear regression model

linear_regressionmodel = LinearRegression()
linear_regressionmodel.fit(X_train, y_train)


# In[36]:


#predict the response for test dataset

predicted_value_LR = linear_regressionmodel.predict(X_test)


# In[37]:


#accuracy of the LR for training and testing set

print('Accuracy of LR on training set: {:.2f}'.format(linear_regressionmodel.score(X_train, y_train)))
print('Accuracy of LR on test set:     {:.2f}'.format(linear_regressionmodel.score(X_test, y_test)))

result_LR = linear_regressionmodel.score(X_test, y_test)
result_LR = round(result_LR,3)
result_LR


# In[51]:


#evaluating the model
print("Model Evaluation of Linear Regressor.")
print('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, predicted_value_LR),1))
print('Mean Squared Error:', round(metrics.mean_squared_error(y_test, predicted_value_LR),1))  
print('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, predicted_value_LR)),1))
print("R-Squared value:", metrics.r2_score(y_test, predicted_value_LR))


# # Decision Tree Regressor

# In[45]:


#decision tree regressor

decisiontree_model = DecisionTreeRegressor(max_depth=5)
decisiontree_model.fit(X_train, y_train)


# In[46]:


#predict the result for the model

predicted_value_dt = decisiontree_model.predict(X_test)


# In[47]:


#accuracy of the DT for training and testing set

print('Accuracy of Decision Tree Regressor model on training set: {:.2f}'.format(decisiontree_model.score(X_train, y_train)))
print('Accuracy of Decision Tree Regressor model on test set:     {:.2f}'.format(decisiontree_model.score(X_test, y_test)))

result_DT = decisiontree_model.score(X_test, y_test)
result_DT = round(result_DT,3)
result_DT


# In[48]:


#feature importance for decision tree regressor

(pd.Series(decisiontree_model.feature_importances_, index=X.columns)
   .nlargest(8)
   .plot(kind='barh'))


# In[49]:


#evaluating the model
print("Model Evaluation of Decision Tree Regressor.")
print('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, predicted_value_dt),1))
print('Mean Squared Error:', round(metrics.mean_squared_error(y_test, predicted_value_dt),1))  
print('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, predicted_value_dt)),1))
print("R-Squared value:", metrics.r2_score(y_test, predicted_value_dt))


# # Random Forest Regressor

# In[38]:


#random forest regressor

rf_model = RandomForestRegressor(n_estimators = 100, random_state = 0)
rf_model.fit(X_train, y_train)


# In[39]:


#predict the response for test dataset

predicted_value_RF = rf_model.predict(X_test)


# In[40]:


#accuracy of the RF Regressor model for training and testing set

print('Accuracy of RF Regressor on training set: {:.2f}'.format(rf_model.score(X_train, y_train)))
print('Accuracy of RF Regressor on test set:     {:.2f}'.format(rf_model.score(X_test, y_test)))

result_RF = rf_model.score(X_test, y_test)
result_RF = round(result_RF,3)
result_RF


# In[41]:


(pd.Series(rf_model.feature_importances_, index=X.columns)
   .nlargest(8)
   .plot(kind='barh'))


# In[50]:


#evaluating the model
print("Model Evaluation of Random Forest Regressor.")
print('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, predicted_value_RF),1))
print('Mean Squared Error:', round(metrics.mean_squared_error(y_test, predicted_value_RF),1))  
print('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, predicted_value_RF)),1))
print("R-Squared value:", metrics.r2_score(y_test, predicted_value_RF))


# # Saving the model

# In[52]:


#pickling the model

import pickle
pickle_out = open("Student_Classifier.pkl", "wb")
pickle.dump(rf_model, pickle_out)
pickle_out.close()


# In[160]:


#saving the labeled data

#student_clean_data.to_csv('Student Risk Analysis_Labeled Data.csv')

